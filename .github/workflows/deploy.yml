on:
  push:
    branches:
      - master

name: Deploy Site
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: eu-west-2

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install

      - name: Build Site
        run: bun run build

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Terraform State
        run: |
          aws s3 cp s3://jkrsp-tf-state/jkrsp.com.tfstate ./terraform.tfstate || true

      - name: Terraform Init and Upgrade
        run: |
          # Initialize without backend
          terraform init -backend=false
          
          # Upgrade state format if needed
          terraform state replace-provider "aws" "registry.terraform.io/hashicorp/aws"
          
          # Push upgraded state back to S3
          aws s3 cp ./terraform.tfstate s3://jkrsp-tf-state/jkrsp.com.tfstate
          
          # Now initialize with backend
          terraform init -backend-config="key=jkrsp.com.tfstate"

      - name: Terraform Plan
        run: terraform plan -out tf.plan

      - name: Terraform Apply
        run: terraform apply tf.plan

      - name: Sync to S3
        run: aws s3 sync dist s3://jkrsp.com

      - name: Invalidate CloudFront Cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths="/*"
